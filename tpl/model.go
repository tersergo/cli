package tpl

var ModelTemplate = `// auto-generated by terser-cli {{.GenerateTime}}
// struct: {{.StructName}} {{.Comment}}
package model

import (
	"github.com/jinzhu/gorm"
	"time"
//  "database/sql"
//  "github.com/guregu/null"
)

// {{.StructName}} struct {{.Comment}}
type {{.StructName}} struct {
	{{range .ColumnList}}{{.PropertyName}}	{{.GoDataType}}		{{$.LabelTag}}gorm:"column:{{.Name}};type:{{.ColumnType}};{{if .IsPrimaryKey}}primary_key{{end}}" json:"{{.Name}}"{{$.LabelTag}}	// {{.Comment}}{{if .DefaultValue}} (默认{{.DefaultValue}}){{end}}
{{end}}}

//  {{.StructName}} 表字段名常量
const (
	{{.StructName}}_TableName  = "{{.Name}}" // 表名: {{.StructName}}.TableName
	{{range  .ColumnList}}{{$.StructName}}_{{.PropertyName}} = "{{.Name}}" // 字段名: {{$.StructName}}.{{.PropertyName}}
{{end}})

// {{.StructName}} 数据库{{.Name}}查询对象
func New{{.StructName}}Query() (db *gorm.DB) {
	db = DefaultConfig().GetDBServer()

	return db.Table({{.StructName}}_TableName)
}

// 获取{{.StructName}}表名
func ({{.VarName}} *{{.StructName}}) TableName() string {
	return {{.StructName}}_TableName
}

func ({{.VarName}} *{{.StructName}}) BeforeCreate(scope *gorm.Scope) error {
	// 执行create时为某些字段赋初值
	//scope.SetColumn("字段名", 字段值)
	return nil
}

func ({{.VarName}} *{{.StructName}}) Create({{if or .CreateUserKey}}adminUserID string{{end}}) error {
{{if .CreateUserKey}} {{.VarName}}.{{.CreateUserKey}} = adminUserID
	{{if .UpdateUserKey}}{{.VarName}}.{{.UpdateUserKey}} = adminUserID{{end}}

{{end}}	return New{{.StructName}}Query().
	    Create(&{{.VarName}}).Error
}

func ({{.VarName}} *{{.StructName}}) Save({{if .UpdateUserKey}}adminUserID string{{end}}) error {
{{if .UpdateUserKey}} {{.VarName}}.ModifiedOn = adminUserID

{{end}}	return New{{.StructName}}Query().
	    Save(&{{.VarName}}).Error
}


func ({{ .VarName }} *{{ .StructName }}) Delete({{if .UpdateUserKey }}adminUserID string {{ end }} ) error {

		{{ if .UpdateUserKey }}{{ .VarName }}.{{ .UpdateUserKey }} = adminUserID{{ end }}

	return {{ .VarName }}.Save({{ if .UpdateUserKey }}adminUserID string{{ end }})

}


`
