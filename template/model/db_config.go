package model

var DBConfig = `// auto-generated by terser-cli 
// struct: DBConfig 数据库配置类
package model

import (
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
//	_ "github.com/jinzhu/gorm/dialects/postgres"
//	_ "github.com/jinzhu/gorm/dialects/sqlite"
//	_ "github.com/jinzhu/gorm/dialects/mssql"
)

// DBConfig struct 数据库配置类
type DBConfig struct {
	DBName     string
	DSN        string // Database Source Name: user:pswd@tcp(127.0.0.1:3306)db_name?charset=utf8&parseTime=True&loc=Local
	DriverName string
	dbServer   *gorm.DB
	Error		error
}

var defaultConfig *DBConfig

func SetDefaultConfig(dc *DBConfig) {
	defaultConfig = dc
}

func GetDefaultDB() (db *gorm.DB) {
	if defaultConfig == nil {
		defaultConfig = GetDefaultConfig()
	}

	return defaultConfig.GetDBServer()
}

func GetDefaultConfig() (dc *DBConfig) {
	// todo: 读取数据库配置
	dbName := "{{.DBName}}"
	dsn := "{{.DSN}}"
	dbDriver := "{{if .DriverName}}{{.DriverName}}{{else}}mysql{{end}}"

	return NewDBConfig(dbName, dsn, dbDriver)
}

func NewDBConfig(dbName, dsn, dbDriver string) *DBConfig {
	return &DBConfig{
		DBName:     dbName,
		DSN:        dsn,
		DriverName: dbDriver,
	}
}

func (dc *DBConfig) initDB() {
	if dc.dbServer != nil {
		return
	}
	// Connecting to database http://gorm.io/docs/connecting_to_the_database.html
	var err error
	dc.dbServer, err = gorm.Open(dc.DriverName, dc.DSN)
	if err != nil {
		// todo: 处理数据连接错误
		panic(err)
	}
}

func (dc *DBConfig) GetDBServer() (db *gorm.DB) {
	dc.initDB()
	return dc.dbServer.New()
}

func (dc *DBConfig) Close() (err error) {
	if dc.dbServer != nil {
		err = dc.dbServer.Close()
	}

	return err
}

`
